// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v5.29.1
// source: secret/registration/remote_attestation/v1beta1/types.proto

/* eslint-disable */
import Long from "long";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "secret.registration.remote_attestation.v1beta1";

export interface QuoteReport {
  id: string;
  timestamp: string;
  version: string;
  isv_enclave_quote_status: string;
  platform_info_blob: string;
  isv_enclave_quote_body: string;
  advisory_ids: string[];
}

export interface QuoteReportBody {
  mr_enclave: string;
  mr_signer: string;
  report_data: string;
}

export interface QuoteReportData {
  version: string;
  sign_type: string;
  report_body?: QuoteReportBody | undefined;
}

export interface EndorsedAttestationReport {
  report: Uint8Array;
  signature: Uint8Array;
  signing_cert: Uint8Array;
}

export interface SGXEC256Signature {
  gx: string;
  gy: string;
}

export interface PlatformInfoBlob {
  sgx_epid_group_flags: number;
  sgx_tcb_evaluation_flags: number;
  pse_evaluation_flags: number;
  latest_equivalent_tcb_psvn: string;
  latest_pse_isvsvn: string;
  latest_psda_svn: string;
  xeid: number;
  gid: number;
  sgx_ec256_signature_t?: SGXEC256Signature | undefined;
}

function createBaseQuoteReport(): QuoteReport {
  return {
    id: "",
    timestamp: "",
    version: "0",
    isv_enclave_quote_status: "",
    platform_info_blob: "",
    isv_enclave_quote_body: "",
    advisory_ids: [],
  };
}

export const QuoteReport = {
  encode(message: QuoteReport, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.timestamp !== "") {
      writer.uint32(18).string(message.timestamp);
    }
    if (message.version !== "0") {
      writer.uint32(24).uint64(message.version);
    }
    if (message.isv_enclave_quote_status !== "") {
      writer.uint32(34).string(message.isv_enclave_quote_status);
    }
    if (message.platform_info_blob !== "") {
      writer.uint32(42).string(message.platform_info_blob);
    }
    if (message.isv_enclave_quote_body !== "") {
      writer.uint32(50).string(message.isv_enclave_quote_body);
    }
    for (const v of message.advisory_ids) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QuoteReport {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuoteReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.version = longToString(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.isv_enclave_quote_status = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.platform_info_blob = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.isv_enclave_quote_body = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.advisory_ids.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuoteReport {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "0",
      isv_enclave_quote_status: isSet(object.isv_enclave_quote_status)
        ? globalThis.String(object.isv_enclave_quote_status)
        : "",
      platform_info_blob: isSet(object.platform_info_blob) ? globalThis.String(object.platform_info_blob) : "",
      isv_enclave_quote_body: isSet(object.isv_enclave_quote_body)
        ? globalThis.String(object.isv_enclave_quote_body)
        : "",
      advisory_ids: globalThis.Array.isArray(object?.advisory_ids)
        ? object.advisory_ids.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QuoteReport): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.version !== "0") {
      obj.version = message.version;
    }
    if (message.isv_enclave_quote_status !== "") {
      obj.isv_enclave_quote_status = message.isv_enclave_quote_status;
    }
    if (message.platform_info_blob !== "") {
      obj.platform_info_blob = message.platform_info_blob;
    }
    if (message.isv_enclave_quote_body !== "") {
      obj.isv_enclave_quote_body = message.isv_enclave_quote_body;
    }
    if (message.advisory_ids?.length) {
      obj.advisory_ids = message.advisory_ids;
    }
    return obj;
  },

  create(base?: DeepPartial<QuoteReport>): QuoteReport {
    return QuoteReport.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QuoteReport>): QuoteReport {
    const message = createBaseQuoteReport();
    message.id = object.id ?? "";
    message.timestamp = object.timestamp ?? "";
    message.version = object.version ?? "0";
    message.isv_enclave_quote_status = object.isv_enclave_quote_status ?? "";
    message.platform_info_blob = object.platform_info_blob ?? "";
    message.isv_enclave_quote_body = object.isv_enclave_quote_body ?? "";
    message.advisory_ids = object.advisory_ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseQuoteReportBody(): QuoteReportBody {
  return { mr_enclave: "", mr_signer: "", report_data: "" };
}

export const QuoteReportBody = {
  encode(message: QuoteReportBody, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mr_enclave !== "") {
      writer.uint32(10).string(message.mr_enclave);
    }
    if (message.mr_signer !== "") {
      writer.uint32(18).string(message.mr_signer);
    }
    if (message.report_data !== "") {
      writer.uint32(26).string(message.report_data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QuoteReportBody {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuoteReportBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mr_enclave = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mr_signer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.report_data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuoteReportBody {
    return {
      mr_enclave: isSet(object.mr_enclave) ? globalThis.String(object.mr_enclave) : "",
      mr_signer: isSet(object.mr_signer) ? globalThis.String(object.mr_signer) : "",
      report_data: isSet(object.report_data) ? globalThis.String(object.report_data) : "",
    };
  },

  toJSON(message: QuoteReportBody): unknown {
    const obj: any = {};
    if (message.mr_enclave !== "") {
      obj.mr_enclave = message.mr_enclave;
    }
    if (message.mr_signer !== "") {
      obj.mr_signer = message.mr_signer;
    }
    if (message.report_data !== "") {
      obj.report_data = message.report_data;
    }
    return obj;
  },

  create(base?: DeepPartial<QuoteReportBody>): QuoteReportBody {
    return QuoteReportBody.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QuoteReportBody>): QuoteReportBody {
    const message = createBaseQuoteReportBody();
    message.mr_enclave = object.mr_enclave ?? "";
    message.mr_signer = object.mr_signer ?? "";
    message.report_data = object.report_data ?? "";
    return message;
  },
};

function createBaseQuoteReportData(): QuoteReportData {
  return { version: "0", sign_type: "0", report_body: undefined };
}

export const QuoteReportData = {
  encode(message: QuoteReportData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.version !== "0") {
      writer.uint32(8).uint64(message.version);
    }
    if (message.sign_type !== "0") {
      writer.uint32(16).uint64(message.sign_type);
    }
    if (message.report_body !== undefined) {
      QuoteReportBody.encode(message.report_body, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QuoteReportData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuoteReportData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.version = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sign_type = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.report_body = QuoteReportBody.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuoteReportData {
    return {
      version: isSet(object.version) ? globalThis.String(object.version) : "0",
      sign_type: isSet(object.sign_type) ? globalThis.String(object.sign_type) : "0",
      report_body: isSet(object.report_body) ? QuoteReportBody.fromJSON(object.report_body) : undefined,
    };
  },

  toJSON(message: QuoteReportData): unknown {
    const obj: any = {};
    if (message.version !== "0") {
      obj.version = message.version;
    }
    if (message.sign_type !== "0") {
      obj.sign_type = message.sign_type;
    }
    if (message.report_body !== undefined) {
      obj.report_body = QuoteReportBody.toJSON(message.report_body);
    }
    return obj;
  },

  create(base?: DeepPartial<QuoteReportData>): QuoteReportData {
    return QuoteReportData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QuoteReportData>): QuoteReportData {
    const message = createBaseQuoteReportData();
    message.version = object.version ?? "0";
    message.sign_type = object.sign_type ?? "0";
    message.report_body = (object.report_body !== undefined && object.report_body !== null)
      ? QuoteReportBody.fromPartial(object.report_body)
      : undefined;
    return message;
  },
};

function createBaseEndorsedAttestationReport(): EndorsedAttestationReport {
  return { report: new Uint8Array(0), signature: new Uint8Array(0), signing_cert: new Uint8Array(0) };
}

export const EndorsedAttestationReport = {
  encode(message: EndorsedAttestationReport, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.report.length !== 0) {
      writer.uint32(10).bytes(message.report);
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    if (message.signing_cert.length !== 0) {
      writer.uint32(26).bytes(message.signing_cert);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EndorsedAttestationReport {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndorsedAttestationReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.report = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.signing_cert = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EndorsedAttestationReport {
    return {
      report: isSet(object.report) ? bytesFromBase64(object.report) : new Uint8Array(0),
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
      signing_cert: isSet(object.signing_cert) ? bytesFromBase64(object.signing_cert) : new Uint8Array(0),
    };
  },

  toJSON(message: EndorsedAttestationReport): unknown {
    const obj: any = {};
    if (message.report.length !== 0) {
      obj.report = base64FromBytes(message.report);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.signing_cert.length !== 0) {
      obj.signing_cert = base64FromBytes(message.signing_cert);
    }
    return obj;
  },

  create(base?: DeepPartial<EndorsedAttestationReport>): EndorsedAttestationReport {
    return EndorsedAttestationReport.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EndorsedAttestationReport>): EndorsedAttestationReport {
    const message = createBaseEndorsedAttestationReport();
    message.report = object.report ?? new Uint8Array(0);
    message.signature = object.signature ?? new Uint8Array(0);
    message.signing_cert = object.signing_cert ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSGXEC256Signature(): SGXEC256Signature {
  return { gx: "", gy: "" };
}

export const SGXEC256Signature = {
  encode(message: SGXEC256Signature, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.gx !== "") {
      writer.uint32(10).string(message.gx);
    }
    if (message.gy !== "") {
      writer.uint32(18).string(message.gy);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SGXEC256Signature {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSGXEC256Signature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gx = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SGXEC256Signature {
    return {
      gx: isSet(object.gx) ? globalThis.String(object.gx) : "",
      gy: isSet(object.gy) ? globalThis.String(object.gy) : "",
    };
  },

  toJSON(message: SGXEC256Signature): unknown {
    const obj: any = {};
    if (message.gx !== "") {
      obj.gx = message.gx;
    }
    if (message.gy !== "") {
      obj.gy = message.gy;
    }
    return obj;
  },

  create(base?: DeepPartial<SGXEC256Signature>): SGXEC256Signature {
    return SGXEC256Signature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SGXEC256Signature>): SGXEC256Signature {
    const message = createBaseSGXEC256Signature();
    message.gx = object.gx ?? "";
    message.gy = object.gy ?? "";
    return message;
  },
};

function createBasePlatformInfoBlob(): PlatformInfoBlob {
  return {
    sgx_epid_group_flags: 0,
    sgx_tcb_evaluation_flags: 0,
    pse_evaluation_flags: 0,
    latest_equivalent_tcb_psvn: "",
    latest_pse_isvsvn: "",
    latest_psda_svn: "",
    xeid: 0,
    gid: 0,
    sgx_ec256_signature_t: undefined,
  };
}

export const PlatformInfoBlob = {
  encode(message: PlatformInfoBlob, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sgx_epid_group_flags !== 0) {
      writer.uint32(8).uint32(message.sgx_epid_group_flags);
    }
    if (message.sgx_tcb_evaluation_flags !== 0) {
      writer.uint32(16).uint32(message.sgx_tcb_evaluation_flags);
    }
    if (message.pse_evaluation_flags !== 0) {
      writer.uint32(24).uint32(message.pse_evaluation_flags);
    }
    if (message.latest_equivalent_tcb_psvn !== "") {
      writer.uint32(34).string(message.latest_equivalent_tcb_psvn);
    }
    if (message.latest_pse_isvsvn !== "") {
      writer.uint32(42).string(message.latest_pse_isvsvn);
    }
    if (message.latest_psda_svn !== "") {
      writer.uint32(50).string(message.latest_psda_svn);
    }
    if (message.xeid !== 0) {
      writer.uint32(56).uint32(message.xeid);
    }
    if (message.gid !== 0) {
      writer.uint32(64).uint32(message.gid);
    }
    if (message.sgx_ec256_signature_t !== undefined) {
      SGXEC256Signature.encode(message.sgx_ec256_signature_t, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlatformInfoBlob {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlatformInfoBlob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sgx_epid_group_flags = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sgx_tcb_evaluation_flags = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pse_evaluation_flags = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.latest_equivalent_tcb_psvn = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.latest_pse_isvsvn = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.latest_psda_svn = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.xeid = reader.uint32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.gid = reader.uint32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.sgx_ec256_signature_t = SGXEC256Signature.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlatformInfoBlob {
    return {
      sgx_epid_group_flags: isSet(object.sgx_epid_group_flags) ? globalThis.Number(object.sgx_epid_group_flags) : 0,
      sgx_tcb_evaluation_flags: isSet(object.sgx_tcb_evaluation_flags)
        ? globalThis.Number(object.sgx_tcb_evaluation_flags)
        : 0,
      pse_evaluation_flags: isSet(object.pse_evaluation_flags) ? globalThis.Number(object.pse_evaluation_flags) : 0,
      latest_equivalent_tcb_psvn: isSet(object.latest_equivalent_tcb_psvn)
        ? globalThis.String(object.latest_equivalent_tcb_psvn)
        : "",
      latest_pse_isvsvn: isSet(object.latest_pse_isvsvn) ? globalThis.String(object.latest_pse_isvsvn) : "",
      latest_psda_svn: isSet(object.latest_psda_svn) ? globalThis.String(object.latest_psda_svn) : "",
      xeid: isSet(object.xeid) ? globalThis.Number(object.xeid) : 0,
      gid: isSet(object.gid) ? globalThis.Number(object.gid) : 0,
      sgx_ec256_signature_t: isSet(object.sgx_ec256_signature_t)
        ? SGXEC256Signature.fromJSON(object.sgx_ec256_signature_t)
        : undefined,
    };
  },

  toJSON(message: PlatformInfoBlob): unknown {
    const obj: any = {};
    if (message.sgx_epid_group_flags !== 0) {
      obj.sgx_epid_group_flags = Math.round(message.sgx_epid_group_flags);
    }
    if (message.sgx_tcb_evaluation_flags !== 0) {
      obj.sgx_tcb_evaluation_flags = Math.round(message.sgx_tcb_evaluation_flags);
    }
    if (message.pse_evaluation_flags !== 0) {
      obj.pse_evaluation_flags = Math.round(message.pse_evaluation_flags);
    }
    if (message.latest_equivalent_tcb_psvn !== "") {
      obj.latest_equivalent_tcb_psvn = message.latest_equivalent_tcb_psvn;
    }
    if (message.latest_pse_isvsvn !== "") {
      obj.latest_pse_isvsvn = message.latest_pse_isvsvn;
    }
    if (message.latest_psda_svn !== "") {
      obj.latest_psda_svn = message.latest_psda_svn;
    }
    if (message.xeid !== 0) {
      obj.xeid = Math.round(message.xeid);
    }
    if (message.gid !== 0) {
      obj.gid = Math.round(message.gid);
    }
    if (message.sgx_ec256_signature_t !== undefined) {
      obj.sgx_ec256_signature_t = SGXEC256Signature.toJSON(message.sgx_ec256_signature_t);
    }
    return obj;
  },

  create(base?: DeepPartial<PlatformInfoBlob>): PlatformInfoBlob {
    return PlatformInfoBlob.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlatformInfoBlob>): PlatformInfoBlob {
    const message = createBasePlatformInfoBlob();
    message.sgx_epid_group_flags = object.sgx_epid_group_flags ?? 0;
    message.sgx_tcb_evaluation_flags = object.sgx_tcb_evaluation_flags ?? 0;
    message.pse_evaluation_flags = object.pse_evaluation_flags ?? 0;
    message.latest_equivalent_tcb_psvn = object.latest_equivalent_tcb_psvn ?? "";
    message.latest_pse_isvsvn = object.latest_pse_isvsvn ?? "";
    message.latest_psda_svn = object.latest_psda_svn ?? "";
    message.xeid = object.xeid ?? 0;
    message.gid = object.gid ?? 0;
    message.sgx_ec256_signature_t =
      (object.sgx_ec256_signature_t !== undefined && object.sgx_ec256_signature_t !== null)
        ? SGXEC256Signature.fromPartial(object.sgx_ec256_signature_t)
        : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
