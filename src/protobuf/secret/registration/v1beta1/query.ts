// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v5.29.1
// source: secret/registration/v1beta1/query.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Empty } from "../../../google/protobuf/empty";
import { Key } from "./msg";

export const protobufPackage = "secret.registration.v1beta1";

export interface QueryEncryptedSeedRequest {
  pub_key: Uint8Array;
}

export interface QueryEncryptedSeedResponse {
  /** [(gogoproto.nullable) = false]; */
  encrypted_seed: Uint8Array;
}

function createBaseQueryEncryptedSeedRequest(): QueryEncryptedSeedRequest {
  return { pub_key: new Uint8Array(0) };
}

export const QueryEncryptedSeedRequest = {
  encode(message: QueryEncryptedSeedRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pub_key.length !== 0) {
      writer.uint32(10).bytes(message.pub_key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryEncryptedSeedRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEncryptedSeedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pub_key = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEncryptedSeedRequest {
    return { pub_key: isSet(object.pub_key) ? bytesFromBase64(object.pub_key) : new Uint8Array(0) };
  },

  toJSON(message: QueryEncryptedSeedRequest): unknown {
    const obj: any = {};
    if (message.pub_key.length !== 0) {
      obj.pub_key = base64FromBytes(message.pub_key);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryEncryptedSeedRequest>): QueryEncryptedSeedRequest {
    return QueryEncryptedSeedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryEncryptedSeedRequest>): QueryEncryptedSeedRequest {
    const message = createBaseQueryEncryptedSeedRequest();
    message.pub_key = object.pub_key ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryEncryptedSeedResponse(): QueryEncryptedSeedResponse {
  return { encrypted_seed: new Uint8Array(0) };
}

export const QueryEncryptedSeedResponse = {
  encode(message: QueryEncryptedSeedResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encrypted_seed.length !== 0) {
      writer.uint32(10).bytes(message.encrypted_seed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryEncryptedSeedResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEncryptedSeedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.encrypted_seed = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEncryptedSeedResponse {
    return {
      encrypted_seed: isSet(object.encrypted_seed) ? bytesFromBase64(object.encrypted_seed) : new Uint8Array(0),
    };
  },

  toJSON(message: QueryEncryptedSeedResponse): unknown {
    const obj: any = {};
    if (message.encrypted_seed.length !== 0) {
      obj.encrypted_seed = base64FromBytes(message.encrypted_seed);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryEncryptedSeedResponse>): QueryEncryptedSeedResponse {
    return QueryEncryptedSeedResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryEncryptedSeedResponse>): QueryEncryptedSeedResponse {
    const message = createBaseQueryEncryptedSeedResponse();
    message.encrypted_seed = object.encrypted_seed ?? new Uint8Array(0);
    return message;
  },
};

/** Query provides defines the gRPC querier service */
export interface Query {
  /** Returns the key used for transactions */
  TxKey(request: Empty): Promise<Key>;
  /** Returns the key used for registration */
  RegistrationKey(request: Empty): Promise<Key>;
  /** Returns the encrypted seed for a registered node by public key */
  EncryptedSeed(request: QueryEncryptedSeedRequest): Promise<QueryEncryptedSeedResponse>;
}

export const QueryServiceName = "secret.registration.v1beta1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.TxKey = this.TxKey.bind(this);
    this.RegistrationKey = this.RegistrationKey.bind(this);
    this.EncryptedSeed = this.EncryptedSeed.bind(this);
  }
  TxKey(request: Empty): Promise<Key> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "TxKey", data);
    return promise.then((data) => Key.decode(_m0.Reader.create(data)));
  }

  RegistrationKey(request: Empty): Promise<Key> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegistrationKey", data);
    return promise.then((data) => Key.decode(_m0.Reader.create(data)));
  }

  EncryptedSeed(request: QueryEncryptedSeedRequest): Promise<QueryEncryptedSeedResponse> {
    const data = QueryEncryptedSeedRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EncryptedSeed", data);
    return promise.then((data) => QueryEncryptedSeedResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
