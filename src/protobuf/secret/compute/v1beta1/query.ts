// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v5.29.1
// source: secret/compute/v1beta1/query.proto

/* eslint-disable */
import Long from "long";
import * as _m0 from "protobufjs/minimal";
import { StringEvent } from "../../../cosmos/base/abci/v1beta1/abci";
import { Empty } from "../../../google/protobuf/empty";
import { Params } from "./params";
import { ContractCodeHistoryEntry, ContractInfo } from "./types";

export const protobufPackage = "secret.compute.v1beta1";

/** ParamsRequest is the request type for the Query/Params RPC method. */
export interface ParamsRequest {
}

/** ParamsResponse is the response type for the Query/Params RPC method. */
export interface ParamsResponse {
  /** params defines the parameters of the module. */
  params?: Params | undefined;
}

export interface QuerySecretContractRequest {
  /** address is the bech32 human readable address of the contract */
  contract_address: string;
  query: Uint8Array;
}

export interface QueryByLabelRequest {
  label: string;
}

export interface QueryByContractAddressRequest {
  /** address is the bech32 human readable address of the contract */
  contract_address: string;
}

export interface QueryByCodeIdRequest {
  code_id: string;
}

export interface QuerySecretContractResponse {
  data: Uint8Array;
}

/**
 * QueryContractInfoResponse is the response type for the Query/ContractInfo RPC
 * method
 */
export interface QueryContractInfoResponse {
  /** contract_address is the bech32 human readable address of the contract */
  contract_address: string;
  contract_info?: ContractInfo | undefined;
}

/**
 * ContractInfoWithAddress adds the contract address to the ContractInfo
 * representation
 */
export interface ContractInfoWithAddress {
  /** contract_address is the bech32 human readable address of the contract */
  contract_address: string;
  contract_info?: ContractInfo | undefined;
}

export interface QueryContractsByCodeIdResponse {
  contract_infos: ContractInfoWithAddress[];
}

export interface CodeInfoResponse {
  code_id: string;
  /** creator is the bech32 human readable address of the contract */
  creator: string;
  code_hash: string;
  source: string;
  builder: string;
}

export interface QueryCodeResponse {
  code_info?: CodeInfoResponse | undefined;
  wasm: Uint8Array;
}

export interface QueryCodesResponse {
  code_infos: CodeInfoResponse[];
}

export interface QueryContractAddressResponse {
  /** address is the bech32 human readable address of the contract */
  contract_address: string;
}

export interface QueryContractLabelResponse {
  label: string;
}

export interface QueryCodeHashResponse {
  code_hash: string;
}

/** DecryptedAnswer is a struct that represents a decrypted tx-query */
export interface DecryptedAnswer {
  type: string;
  input: string;
  output_data: string;
  output_data_as_string: string;
}

export interface DecryptedAnswers {
  answers: DecryptedAnswer[];
  output_logs: StringEvent[];
  output_error: string;
  plaintext_error: string;
}

/**
 * QueryContractHistoryRequest is the request type for the Query/ContractHistory
 * RPC method
 */
export interface QueryContractHistoryRequest {
  /** address is the address of the contract to query */
  contract_address: string;
}

/**
 * QueryContractHistoryResponse is the response type for the
 * Query/ContractHistory RPC method
 */
export interface QueryContractHistoryResponse {
  entries: ContractCodeHistoryEntry[];
}

function createBaseParamsRequest(): ParamsRequest {
  return {};
}

export const ParamsRequest = {
  encode(_: ParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ParamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ParamsRequest {
    return {};
  },

  toJSON(_: ParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ParamsRequest>): ParamsRequest {
    return ParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ParamsRequest>): ParamsRequest {
    const message = createBaseParamsRequest();
    return message;
  },
};

function createBaseParamsResponse(): ParamsResponse {
  return { params: undefined };
}

export const ParamsResponse = {
  encode(message: ParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: ParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<ParamsResponse>): ParamsResponse {
    return ParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParamsResponse>): ParamsResponse {
    const message = createBaseParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQuerySecretContractRequest(): QuerySecretContractRequest {
  return { contract_address: "", query: new Uint8Array(0) };
}

export const QuerySecretContractRequest = {
  encode(message: QuerySecretContractRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.query.length !== 0) {
      writer.uint32(18).bytes(message.query);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QuerySecretContractRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySecretContractRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySecretContractRequest {
    return {
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      query: isSet(object.query) ? bytesFromBase64(object.query) : new Uint8Array(0),
    };
  },

  toJSON(message: QuerySecretContractRequest): unknown {
    const obj: any = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.query.length !== 0) {
      obj.query = base64FromBytes(message.query);
    }
    return obj;
  },

  create(base?: DeepPartial<QuerySecretContractRequest>): QuerySecretContractRequest {
    return QuerySecretContractRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QuerySecretContractRequest>): QuerySecretContractRequest {
    const message = createBaseQuerySecretContractRequest();
    message.contract_address = object.contract_address ?? "";
    message.query = object.query ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryByLabelRequest(): QueryByLabelRequest {
  return { label: "" };
}

export const QueryByLabelRequest = {
  encode(message: QueryByLabelRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.label !== "") {
      writer.uint32(10).string(message.label);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryByLabelRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryByLabelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryByLabelRequest {
    return { label: isSet(object.label) ? globalThis.String(object.label) : "" };
  },

  toJSON(message: QueryByLabelRequest): unknown {
    const obj: any = {};
    if (message.label !== "") {
      obj.label = message.label;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryByLabelRequest>): QueryByLabelRequest {
    return QueryByLabelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryByLabelRequest>): QueryByLabelRequest {
    const message = createBaseQueryByLabelRequest();
    message.label = object.label ?? "";
    return message;
  },
};

function createBaseQueryByContractAddressRequest(): QueryByContractAddressRequest {
  return { contract_address: "" };
}

export const QueryByContractAddressRequest = {
  encode(message: QueryByContractAddressRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryByContractAddressRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryByContractAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryByContractAddressRequest {
    return { contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "" };
  },

  toJSON(message: QueryByContractAddressRequest): unknown {
    const obj: any = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryByContractAddressRequest>): QueryByContractAddressRequest {
    return QueryByContractAddressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryByContractAddressRequest>): QueryByContractAddressRequest {
    const message = createBaseQueryByContractAddressRequest();
    message.contract_address = object.contract_address ?? "";
    return message;
  },
};

function createBaseQueryByCodeIdRequest(): QueryByCodeIdRequest {
  return { code_id: "0" };
}

export const QueryByCodeIdRequest = {
  encode(message: QueryByCodeIdRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code_id !== "0") {
      writer.uint32(8).uint64(message.code_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryByCodeIdRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryByCodeIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code_id = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryByCodeIdRequest {
    return { code_id: isSet(object.code_id) ? globalThis.String(object.code_id) : "0" };
  },

  toJSON(message: QueryByCodeIdRequest): unknown {
    const obj: any = {};
    if (message.code_id !== "0") {
      obj.code_id = message.code_id;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryByCodeIdRequest>): QueryByCodeIdRequest {
    return QueryByCodeIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryByCodeIdRequest>): QueryByCodeIdRequest {
    const message = createBaseQueryByCodeIdRequest();
    message.code_id = object.code_id ?? "0";
    return message;
  },
};

function createBaseQuerySecretContractResponse(): QuerySecretContractResponse {
  return { data: new Uint8Array(0) };
}

export const QuerySecretContractResponse = {
  encode(message: QuerySecretContractResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QuerySecretContractResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySecretContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySecretContractResponse {
    return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
  },

  toJSON(message: QuerySecretContractResponse): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<QuerySecretContractResponse>): QuerySecretContractResponse {
    return QuerySecretContractResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QuerySecretContractResponse>): QuerySecretContractResponse {
    const message = createBaseQuerySecretContractResponse();
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryContractInfoResponse(): QueryContractInfoResponse {
  return { contract_address: "", contract_info: undefined };
}

export const QueryContractInfoResponse = {
  encode(message: QueryContractInfoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.contract_info !== undefined) {
      ContractInfo.encode(message.contract_info, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryContractInfoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContractInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contract_info = ContractInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContractInfoResponse {
    return {
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      contract_info: isSet(object.contract_info) ? ContractInfo.fromJSON(object.contract_info) : undefined,
    };
  },

  toJSON(message: QueryContractInfoResponse): unknown {
    const obj: any = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.contract_info !== undefined) {
      obj.contract_info = ContractInfo.toJSON(message.contract_info);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryContractInfoResponse>): QueryContractInfoResponse {
    return QueryContractInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryContractInfoResponse>): QueryContractInfoResponse {
    const message = createBaseQueryContractInfoResponse();
    message.contract_address = object.contract_address ?? "";
    message.contract_info = (object.contract_info !== undefined && object.contract_info !== null)
      ? ContractInfo.fromPartial(object.contract_info)
      : undefined;
    return message;
  },
};

function createBaseContractInfoWithAddress(): ContractInfoWithAddress {
  return { contract_address: "", contract_info: undefined };
}

export const ContractInfoWithAddress = {
  encode(message: ContractInfoWithAddress, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.contract_info !== undefined) {
      ContractInfo.encode(message.contract_info, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ContractInfoWithAddress {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContractInfoWithAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contract_info = ContractInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContractInfoWithAddress {
    return {
      contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "",
      contract_info: isSet(object.contract_info) ? ContractInfo.fromJSON(object.contract_info) : undefined,
    };
  },

  toJSON(message: ContractInfoWithAddress): unknown {
    const obj: any = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.contract_info !== undefined) {
      obj.contract_info = ContractInfo.toJSON(message.contract_info);
    }
    return obj;
  },

  create(base?: DeepPartial<ContractInfoWithAddress>): ContractInfoWithAddress {
    return ContractInfoWithAddress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContractInfoWithAddress>): ContractInfoWithAddress {
    const message = createBaseContractInfoWithAddress();
    message.contract_address = object.contract_address ?? "";
    message.contract_info = (object.contract_info !== undefined && object.contract_info !== null)
      ? ContractInfo.fromPartial(object.contract_info)
      : undefined;
    return message;
  },
};

function createBaseQueryContractsByCodeIdResponse(): QueryContractsByCodeIdResponse {
  return { contract_infos: [] };
}

export const QueryContractsByCodeIdResponse = {
  encode(message: QueryContractsByCodeIdResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.contract_infos) {
      ContractInfoWithAddress.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryContractsByCodeIdResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContractsByCodeIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_infos.push(ContractInfoWithAddress.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContractsByCodeIdResponse {
    return {
      contract_infos: globalThis.Array.isArray(object?.contract_infos)
        ? object.contract_infos.map((e: any) => ContractInfoWithAddress.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryContractsByCodeIdResponse): unknown {
    const obj: any = {};
    if (message.contract_infos?.length) {
      obj.contract_infos = message.contract_infos.map((e) => ContractInfoWithAddress.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryContractsByCodeIdResponse>): QueryContractsByCodeIdResponse {
    return QueryContractsByCodeIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryContractsByCodeIdResponse>): QueryContractsByCodeIdResponse {
    const message = createBaseQueryContractsByCodeIdResponse();
    message.contract_infos = object.contract_infos?.map((e) => ContractInfoWithAddress.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCodeInfoResponse(): CodeInfoResponse {
  return { code_id: "0", creator: "", code_hash: "", source: "", builder: "" };
}

export const CodeInfoResponse = {
  encode(message: CodeInfoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code_id !== "0") {
      writer.uint32(8).uint64(message.code_id);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.code_hash !== "") {
      writer.uint32(26).string(message.code_hash);
    }
    if (message.source !== "") {
      writer.uint32(34).string(message.source);
    }
    if (message.builder !== "") {
      writer.uint32(42).string(message.builder);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CodeInfoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCodeInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code_id = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.code_hash = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.source = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.builder = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CodeInfoResponse {
    return {
      code_id: isSet(object.code_id) ? globalThis.String(object.code_id) : "0",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      code_hash: isSet(object.code_hash) ? globalThis.String(object.code_hash) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      builder: isSet(object.builder) ? globalThis.String(object.builder) : "",
    };
  },

  toJSON(message: CodeInfoResponse): unknown {
    const obj: any = {};
    if (message.code_id !== "0") {
      obj.code_id = message.code_id;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.code_hash !== "") {
      obj.code_hash = message.code_hash;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.builder !== "") {
      obj.builder = message.builder;
    }
    return obj;
  },

  create(base?: DeepPartial<CodeInfoResponse>): CodeInfoResponse {
    return CodeInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CodeInfoResponse>): CodeInfoResponse {
    const message = createBaseCodeInfoResponse();
    message.code_id = object.code_id ?? "0";
    message.creator = object.creator ?? "";
    message.code_hash = object.code_hash ?? "";
    message.source = object.source ?? "";
    message.builder = object.builder ?? "";
    return message;
  },
};

function createBaseQueryCodeResponse(): QueryCodeResponse {
  return { code_info: undefined, wasm: new Uint8Array(0) };
}

export const QueryCodeResponse = {
  encode(message: QueryCodeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code_info !== undefined) {
      CodeInfoResponse.encode(message.code_info, writer.uint32(10).fork()).ldelim();
    }
    if (message.wasm.length !== 0) {
      writer.uint32(18).bytes(message.wasm);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryCodeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryCodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code_info = CodeInfoResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.wasm = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryCodeResponse {
    return {
      code_info: isSet(object.code_info) ? CodeInfoResponse.fromJSON(object.code_info) : undefined,
      wasm: isSet(object.wasm) ? bytesFromBase64(object.wasm) : new Uint8Array(0),
    };
  },

  toJSON(message: QueryCodeResponse): unknown {
    const obj: any = {};
    if (message.code_info !== undefined) {
      obj.code_info = CodeInfoResponse.toJSON(message.code_info);
    }
    if (message.wasm.length !== 0) {
      obj.wasm = base64FromBytes(message.wasm);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryCodeResponse>): QueryCodeResponse {
    return QueryCodeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryCodeResponse>): QueryCodeResponse {
    const message = createBaseQueryCodeResponse();
    message.code_info = (object.code_info !== undefined && object.code_info !== null)
      ? CodeInfoResponse.fromPartial(object.code_info)
      : undefined;
    message.wasm = object.wasm ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryCodesResponse(): QueryCodesResponse {
  return { code_infos: [] };
}

export const QueryCodesResponse = {
  encode(message: QueryCodesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.code_infos) {
      CodeInfoResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryCodesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryCodesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code_infos.push(CodeInfoResponse.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryCodesResponse {
    return {
      code_infos: globalThis.Array.isArray(object?.code_infos)
        ? object.code_infos.map((e: any) => CodeInfoResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryCodesResponse): unknown {
    const obj: any = {};
    if (message.code_infos?.length) {
      obj.code_infos = message.code_infos.map((e) => CodeInfoResponse.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryCodesResponse>): QueryCodesResponse {
    return QueryCodesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryCodesResponse>): QueryCodesResponse {
    const message = createBaseQueryCodesResponse();
    message.code_infos = object.code_infos?.map((e) => CodeInfoResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryContractAddressResponse(): QueryContractAddressResponse {
  return { contract_address: "" };
}

export const QueryContractAddressResponse = {
  encode(message: QueryContractAddressResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryContractAddressResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContractAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContractAddressResponse {
    return { contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "" };
  },

  toJSON(message: QueryContractAddressResponse): unknown {
    const obj: any = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryContractAddressResponse>): QueryContractAddressResponse {
    return QueryContractAddressResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryContractAddressResponse>): QueryContractAddressResponse {
    const message = createBaseQueryContractAddressResponse();
    message.contract_address = object.contract_address ?? "";
    return message;
  },
};

function createBaseQueryContractLabelResponse(): QueryContractLabelResponse {
  return { label: "" };
}

export const QueryContractLabelResponse = {
  encode(message: QueryContractLabelResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.label !== "") {
      writer.uint32(10).string(message.label);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryContractLabelResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContractLabelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContractLabelResponse {
    return { label: isSet(object.label) ? globalThis.String(object.label) : "" };
  },

  toJSON(message: QueryContractLabelResponse): unknown {
    const obj: any = {};
    if (message.label !== "") {
      obj.label = message.label;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryContractLabelResponse>): QueryContractLabelResponse {
    return QueryContractLabelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryContractLabelResponse>): QueryContractLabelResponse {
    const message = createBaseQueryContractLabelResponse();
    message.label = object.label ?? "";
    return message;
  },
};

function createBaseQueryCodeHashResponse(): QueryCodeHashResponse {
  return { code_hash: "" };
}

export const QueryCodeHashResponse = {
  encode(message: QueryCodeHashResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code_hash !== "") {
      writer.uint32(10).string(message.code_hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryCodeHashResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryCodeHashResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code_hash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryCodeHashResponse {
    return { code_hash: isSet(object.code_hash) ? globalThis.String(object.code_hash) : "" };
  },

  toJSON(message: QueryCodeHashResponse): unknown {
    const obj: any = {};
    if (message.code_hash !== "") {
      obj.code_hash = message.code_hash;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryCodeHashResponse>): QueryCodeHashResponse {
    return QueryCodeHashResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryCodeHashResponse>): QueryCodeHashResponse {
    const message = createBaseQueryCodeHashResponse();
    message.code_hash = object.code_hash ?? "";
    return message;
  },
};

function createBaseDecryptedAnswer(): DecryptedAnswer {
  return { type: "", input: "", output_data: "", output_data_as_string: "" };
}

export const DecryptedAnswer = {
  encode(message: DecryptedAnswer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.input !== "") {
      writer.uint32(18).string(message.input);
    }
    if (message.output_data !== "") {
      writer.uint32(26).string(message.output_data);
    }
    if (message.output_data_as_string !== "") {
      writer.uint32(34).string(message.output_data_as_string);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DecryptedAnswer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecryptedAnswer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.input = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.output_data = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.output_data_as_string = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DecryptedAnswer {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      input: isSet(object.input) ? globalThis.String(object.input) : "",
      output_data: isSet(object.output_data) ? globalThis.String(object.output_data) : "",
      output_data_as_string: isSet(object.output_data_as_string) ? globalThis.String(object.output_data_as_string) : "",
    };
  },

  toJSON(message: DecryptedAnswer): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.input !== "") {
      obj.input = message.input;
    }
    if (message.output_data !== "") {
      obj.output_data = message.output_data;
    }
    if (message.output_data_as_string !== "") {
      obj.output_data_as_string = message.output_data_as_string;
    }
    return obj;
  },

  create(base?: DeepPartial<DecryptedAnswer>): DecryptedAnswer {
    return DecryptedAnswer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DecryptedAnswer>): DecryptedAnswer {
    const message = createBaseDecryptedAnswer();
    message.type = object.type ?? "";
    message.input = object.input ?? "";
    message.output_data = object.output_data ?? "";
    message.output_data_as_string = object.output_data_as_string ?? "";
    return message;
  },
};

function createBaseDecryptedAnswers(): DecryptedAnswers {
  return { answers: [], output_logs: [], output_error: "", plaintext_error: "" };
}

export const DecryptedAnswers = {
  encode(message: DecryptedAnswers, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.answers) {
      DecryptedAnswer.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.output_logs) {
      StringEvent.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.output_error !== "") {
      writer.uint32(26).string(message.output_error);
    }
    if (message.plaintext_error !== "") {
      writer.uint32(34).string(message.plaintext_error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DecryptedAnswers {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecryptedAnswers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.answers.push(DecryptedAnswer.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.output_logs.push(StringEvent.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.output_error = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.plaintext_error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DecryptedAnswers {
    return {
      answers: globalThis.Array.isArray(object?.answers)
        ? object.answers.map((e: any) => DecryptedAnswer.fromJSON(e))
        : [],
      output_logs: globalThis.Array.isArray(object?.output_logs)
        ? object.output_logs.map((e: any) => StringEvent.fromJSON(e))
        : [],
      output_error: isSet(object.output_error) ? globalThis.String(object.output_error) : "",
      plaintext_error: isSet(object.plaintext_error) ? globalThis.String(object.plaintext_error) : "",
    };
  },

  toJSON(message: DecryptedAnswers): unknown {
    const obj: any = {};
    if (message.answers?.length) {
      obj.answers = message.answers.map((e) => DecryptedAnswer.toJSON(e));
    }
    if (message.output_logs?.length) {
      obj.output_logs = message.output_logs.map((e) => StringEvent.toJSON(e));
    }
    if (message.output_error !== "") {
      obj.output_error = message.output_error;
    }
    if (message.plaintext_error !== "") {
      obj.plaintext_error = message.plaintext_error;
    }
    return obj;
  },

  create(base?: DeepPartial<DecryptedAnswers>): DecryptedAnswers {
    return DecryptedAnswers.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DecryptedAnswers>): DecryptedAnswers {
    const message = createBaseDecryptedAnswers();
    message.answers = object.answers?.map((e) => DecryptedAnswer.fromPartial(e)) || [];
    message.output_logs = object.output_logs?.map((e) => StringEvent.fromPartial(e)) || [];
    message.output_error = object.output_error ?? "";
    message.plaintext_error = object.plaintext_error ?? "";
    return message;
  },
};

function createBaseQueryContractHistoryRequest(): QueryContractHistoryRequest {
  return { contract_address: "" };
}

export const QueryContractHistoryRequest = {
  encode(message: QueryContractHistoryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryContractHistoryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContractHistoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contract_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContractHistoryRequest {
    return { contract_address: isSet(object.contract_address) ? globalThis.String(object.contract_address) : "" };
  },

  toJSON(message: QueryContractHistoryRequest): unknown {
    const obj: any = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryContractHistoryRequest>): QueryContractHistoryRequest {
    return QueryContractHistoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryContractHistoryRequest>): QueryContractHistoryRequest {
    const message = createBaseQueryContractHistoryRequest();
    message.contract_address = object.contract_address ?? "";
    return message;
  },
};

function createBaseQueryContractHistoryResponse(): QueryContractHistoryResponse {
  return { entries: [] };
}

export const QueryContractHistoryResponse = {
  encode(message: QueryContractHistoryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.entries) {
      ContractCodeHistoryEntry.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryContractHistoryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContractHistoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entries.push(ContractCodeHistoryEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContractHistoryResponse {
    return {
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => ContractCodeHistoryEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryContractHistoryResponse): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => ContractCodeHistoryEntry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryContractHistoryResponse>): QueryContractHistoryResponse {
    return QueryContractHistoryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryContractHistoryResponse>): QueryContractHistoryResponse {
    const message = createBaseQueryContractHistoryResponse();
    message.entries = object.entries?.map((e) => ContractCodeHistoryEntry.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service */
export interface Query {
  /** Query contract info by address */
  ContractInfo(request: QueryByContractAddressRequest): Promise<QueryContractInfoResponse>;
  /** Query code info by id */
  ContractsByCodeId(request: QueryByCodeIdRequest): Promise<QueryContractsByCodeIdResponse>;
  /** Query secret contract */
  QuerySecretContract(request: QuerySecretContractRequest): Promise<QuerySecretContractResponse>;
  /** Query a specific contract code by id */
  Code(request: QueryByCodeIdRequest): Promise<QueryCodeResponse>;
  /** Query all contract codes on-chain */
  Codes(request: Empty): Promise<QueryCodesResponse>;
  /** Query code hash by contract address */
  CodeHashByContractAddress(request: QueryByContractAddressRequest): Promise<QueryCodeHashResponse>;
  /** Query code hash by code id */
  CodeHashByCodeId(request: QueryByCodeIdRequest): Promise<QueryCodeHashResponse>;
  /** Query contract label by address */
  LabelByAddress(request: QueryByContractAddressRequest): Promise<QueryContractLabelResponse>;
  /** Query contract address by label */
  AddressByLabel(request: QueryByLabelRequest): Promise<QueryContractAddressResponse>;
  /** ContractHistory gets the contract code history */
  ContractHistory(request: QueryContractHistoryRequest): Promise<QueryContractHistoryResponse>;
  /**
   * Params defines a gRPC query method that returns the compute
   * module's parameters.
   */
  Params(request: ParamsRequest): Promise<ParamsResponse>;
}

export const QueryServiceName = "secret.compute.v1beta1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.ContractInfo = this.ContractInfo.bind(this);
    this.ContractsByCodeId = this.ContractsByCodeId.bind(this);
    this.QuerySecretContract = this.QuerySecretContract.bind(this);
    this.Code = this.Code.bind(this);
    this.Codes = this.Codes.bind(this);
    this.CodeHashByContractAddress = this.CodeHashByContractAddress.bind(this);
    this.CodeHashByCodeId = this.CodeHashByCodeId.bind(this);
    this.LabelByAddress = this.LabelByAddress.bind(this);
    this.AddressByLabel = this.AddressByLabel.bind(this);
    this.ContractHistory = this.ContractHistory.bind(this);
    this.Params = this.Params.bind(this);
  }
  ContractInfo(request: QueryByContractAddressRequest): Promise<QueryContractInfoResponse> {
    const data = QueryByContractAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ContractInfo", data);
    return promise.then((data) => QueryContractInfoResponse.decode(_m0.Reader.create(data)));
  }

  ContractsByCodeId(request: QueryByCodeIdRequest): Promise<QueryContractsByCodeIdResponse> {
    const data = QueryByCodeIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ContractsByCodeId", data);
    return promise.then((data) => QueryContractsByCodeIdResponse.decode(_m0.Reader.create(data)));
  }

  QuerySecretContract(request: QuerySecretContractRequest): Promise<QuerySecretContractResponse> {
    const data = QuerySecretContractRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QuerySecretContract", data);
    return promise.then((data) => QuerySecretContractResponse.decode(_m0.Reader.create(data)));
  }

  Code(request: QueryByCodeIdRequest): Promise<QueryCodeResponse> {
    const data = QueryByCodeIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Code", data);
    return promise.then((data) => QueryCodeResponse.decode(_m0.Reader.create(data)));
  }

  Codes(request: Empty): Promise<QueryCodesResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "Codes", data);
    return promise.then((data) => QueryCodesResponse.decode(_m0.Reader.create(data)));
  }

  CodeHashByContractAddress(request: QueryByContractAddressRequest): Promise<QueryCodeHashResponse> {
    const data = QueryByContractAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CodeHashByContractAddress", data);
    return promise.then((data) => QueryCodeHashResponse.decode(_m0.Reader.create(data)));
  }

  CodeHashByCodeId(request: QueryByCodeIdRequest): Promise<QueryCodeHashResponse> {
    const data = QueryByCodeIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CodeHashByCodeId", data);
    return promise.then((data) => QueryCodeHashResponse.decode(_m0.Reader.create(data)));
  }

  LabelByAddress(request: QueryByContractAddressRequest): Promise<QueryContractLabelResponse> {
    const data = QueryByContractAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LabelByAddress", data);
    return promise.then((data) => QueryContractLabelResponse.decode(_m0.Reader.create(data)));
  }

  AddressByLabel(request: QueryByLabelRequest): Promise<QueryContractAddressResponse> {
    const data = QueryByLabelRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddressByLabel", data);
    return promise.then((data) => QueryContractAddressResponse.decode(_m0.Reader.create(data)));
  }

  ContractHistory(request: QueryContractHistoryRequest): Promise<QueryContractHistoryResponse> {
    const data = QueryContractHistoryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ContractHistory", data);
    return promise.then((data) => QueryContractHistoryResponse.decode(_m0.Reader.create(data)));
  }

  Params(request: ParamsRequest): Promise<ParamsResponse> {
    const data = ParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => ParamsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
