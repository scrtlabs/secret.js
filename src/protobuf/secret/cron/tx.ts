// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v3.21.3
// source: secret/cron/tx.proto

/* eslint-disable */
import Long from "long";
import * as _m0 from "protobufjs/minimal";
import { Params } from "./params";
import { MsgExecuteContract } from "./schedule";

export const protobufPackage = "secret.cron";

/** The MsgAddSchedule request type. */
export interface MsgAddSchedule {
  /** The address of the governance account. */
  authority: string;
  /** Name of the schedule */
  name: string;
  /** Period in blocks */
  period: string;
  /** Msgs that will be executed every certain number of blocks, specified in the `period` field */
  msgs: MsgExecuteContract[];
}

/** Defines the response structure for executing a MsgAddSchedule message. */
export interface MsgAddScheduleResponse {
}

/** The MsgRemoveSchedule request type. */
export interface MsgRemoveSchedule {
  /** The address of the governance account. */
  authority: string;
  /** Name of the schedule */
  name: string;
}

/** Defines the response structure for executing a MsgRemoveSchedule message. */
export interface MsgRemoveScheduleResponse {
}

/**
 * The MsgUpdateParams request type.
 *
 * Since: 0.47
 */
export interface MsgUpdateParams {
  /** The address of the governance account. */
  authority: string;
  /**
   * Defines the x/cron parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params?: Params | undefined;
}

/**
 * Defines the response structure for executing a MsgUpdateParams message.
 *
 * Since: 0.47
 */
export interface MsgUpdateParamsResponse {
}

function createBaseMsgAddSchedule(): MsgAddSchedule {
  return { authority: "", name: "", period: "0", msgs: [] };
}

export const MsgAddSchedule = {
  encode(message: MsgAddSchedule, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.period !== "0") {
      writer.uint32(24).uint64(message.period);
    }
    for (const v of message.msgs) {
      MsgExecuteContract.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddSchedule {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.period = longToString(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.msgs.push(MsgExecuteContract.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddSchedule {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      period: isSet(object.period) ? globalThis.String(object.period) : "0",
      msgs: globalThis.Array.isArray(object?.msgs) ? object.msgs.map((e: any) => MsgExecuteContract.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgAddSchedule): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.period !== "0") {
      obj.period = message.period;
    }
    if (message.msgs?.length) {
      obj.msgs = message.msgs.map((e) => MsgExecuteContract.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgAddSchedule>): MsgAddSchedule {
    return MsgAddSchedule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgAddSchedule>): MsgAddSchedule {
    const message = createBaseMsgAddSchedule();
    message.authority = object.authority ?? "";
    message.name = object.name ?? "";
    message.period = object.period ?? "0";
    message.msgs = object.msgs?.map((e) => MsgExecuteContract.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgAddScheduleResponse(): MsgAddScheduleResponse {
  return {};
}

export const MsgAddScheduleResponse = {
  encode(_: MsgAddScheduleResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddScheduleResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddScheduleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddScheduleResponse {
    return {};
  },

  toJSON(_: MsgAddScheduleResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgAddScheduleResponse>): MsgAddScheduleResponse {
    return MsgAddScheduleResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgAddScheduleResponse>): MsgAddScheduleResponse {
    const message = createBaseMsgAddScheduleResponse();
    return message;
  },
};

function createBaseMsgRemoveSchedule(): MsgRemoveSchedule {
  return { authority: "", name: "" };
}

export const MsgRemoveSchedule = {
  encode(message: MsgRemoveSchedule, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveSchedule {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveSchedule {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: MsgRemoveSchedule): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRemoveSchedule>): MsgRemoveSchedule {
    return MsgRemoveSchedule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRemoveSchedule>): MsgRemoveSchedule {
    const message = createBaseMsgRemoveSchedule();
    message.authority = object.authority ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseMsgRemoveScheduleResponse(): MsgRemoveScheduleResponse {
  return {};
}

export const MsgRemoveScheduleResponse = {
  encode(_: MsgRemoveScheduleResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveScheduleResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveScheduleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveScheduleResponse {
    return {};
  },

  toJSON(_: MsgRemoveScheduleResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRemoveScheduleResponse>): MsgRemoveScheduleResponse {
    return MsgRemoveScheduleResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgRemoveScheduleResponse>): MsgRemoveScheduleResponse {
    const message = createBaseMsgRemoveScheduleResponse();
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

/** Defines the Msg service. */
export interface Msg {
  /** Adds new schedule. */
  AddSchedule(request: MsgAddSchedule): Promise<MsgAddScheduleResponse>;
  /** Removes schedule. */
  RemoveSchedule(request: MsgRemoveSchedule): Promise<MsgRemoveScheduleResponse>;
  /** Updates the module parameters. */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "secret.cron.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.AddSchedule = this.AddSchedule.bind(this);
    this.RemoveSchedule = this.RemoveSchedule.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  AddSchedule(request: MsgAddSchedule): Promise<MsgAddScheduleResponse> {
    const data = MsgAddSchedule.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddSchedule", data);
    return promise.then((data) => MsgAddScheduleResponse.decode(_m0.Reader.create(data)));
  }

  RemoveSchedule(request: MsgRemoveSchedule): Promise<MsgRemoveScheduleResponse> {
    const data = MsgRemoveSchedule.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveSchedule", data);
    return promise.then((data) => MsgRemoveScheduleResponse.decode(_m0.Reader.create(data)));
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
