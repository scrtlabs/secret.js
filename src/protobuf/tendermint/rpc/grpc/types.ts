// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v5.29.1
// source: tendermint/rpc/grpc/types.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { ExecTxResult, ResponseCheckTx } from "../../abci/types";

export const protobufPackage = "tendermint.rpc.grpc";

export interface RequestPing {
}

export interface RequestBroadcastTx {
  tx: Uint8Array;
}

export interface ResponsePing {
}

export interface ResponseBroadcastTx {
  check_tx?: ResponseCheckTx | undefined;
  tx_result?: ExecTxResult | undefined;
}

function createBaseRequestPing(): RequestPing {
  return {};
}

export const RequestPing = {
  encode(_: RequestPing, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestPing {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestPing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RequestPing {
    return {};
  },

  toJSON(_: RequestPing): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RequestPing>): RequestPing {
    return RequestPing.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RequestPing>): RequestPing {
    const message = createBaseRequestPing();
    return message;
  },
};

function createBaseRequestBroadcastTx(): RequestBroadcastTx {
  return { tx: new Uint8Array(0) };
}

export const RequestBroadcastTx = {
  encode(message: RequestBroadcastTx, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tx.length !== 0) {
      writer.uint32(10).bytes(message.tx);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestBroadcastTx {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestBroadcastTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tx = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestBroadcastTx {
    return { tx: isSet(object.tx) ? bytesFromBase64(object.tx) : new Uint8Array(0) };
  },

  toJSON(message: RequestBroadcastTx): unknown {
    const obj: any = {};
    if (message.tx.length !== 0) {
      obj.tx = base64FromBytes(message.tx);
    }
    return obj;
  },

  create(base?: DeepPartial<RequestBroadcastTx>): RequestBroadcastTx {
    return RequestBroadcastTx.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RequestBroadcastTx>): RequestBroadcastTx {
    const message = createBaseRequestBroadcastTx();
    message.tx = object.tx ?? new Uint8Array(0);
    return message;
  },
};

function createBaseResponsePing(): ResponsePing {
  return {};
}

export const ResponsePing = {
  encode(_: ResponsePing, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResponsePing {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponsePing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResponsePing {
    return {};
  },

  toJSON(_: ResponsePing): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ResponsePing>): ResponsePing {
    return ResponsePing.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResponsePing>): ResponsePing {
    const message = createBaseResponsePing();
    return message;
  },
};

function createBaseResponseBroadcastTx(): ResponseBroadcastTx {
  return { check_tx: undefined, tx_result: undefined };
}

export const ResponseBroadcastTx = {
  encode(message: ResponseBroadcastTx, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.check_tx !== undefined) {
      ResponseCheckTx.encode(message.check_tx, writer.uint32(10).fork()).ldelim();
    }
    if (message.tx_result !== undefined) {
      ExecTxResult.encode(message.tx_result, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResponseBroadcastTx {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseBroadcastTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.check_tx = ResponseCheckTx.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tx_result = ExecTxResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseBroadcastTx {
    return {
      check_tx: isSet(object.check_tx) ? ResponseCheckTx.fromJSON(object.check_tx) : undefined,
      tx_result: isSet(object.tx_result) ? ExecTxResult.fromJSON(object.tx_result) : undefined,
    };
  },

  toJSON(message: ResponseBroadcastTx): unknown {
    const obj: any = {};
    if (message.check_tx !== undefined) {
      obj.check_tx = ResponseCheckTx.toJSON(message.check_tx);
    }
    if (message.tx_result !== undefined) {
      obj.tx_result = ExecTxResult.toJSON(message.tx_result);
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseBroadcastTx>): ResponseBroadcastTx {
    return ResponseBroadcastTx.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseBroadcastTx>): ResponseBroadcastTx {
    const message = createBaseResponseBroadcastTx();
    message.check_tx = (object.check_tx !== undefined && object.check_tx !== null)
      ? ResponseCheckTx.fromPartial(object.check_tx)
      : undefined;
    message.tx_result = (object.tx_result !== undefined && object.tx_result !== null)
      ? ExecTxResult.fromPartial(object.tx_result)
      : undefined;
    return message;
  },
};

/**
 * BroadcastAPI
 *
 * Deprecated: This API will be superseded by a more comprehensive gRPC-based
 * broadcast API, and is scheduled for removal after v0.38.
 */
export interface BroadcastAPI {
  Ping(request: RequestPing): Promise<ResponsePing>;
  BroadcastTx(request: RequestBroadcastTx): Promise<ResponseBroadcastTx>;
}

export const BroadcastAPIServiceName = "tendermint.rpc.grpc.BroadcastAPI";
export class BroadcastAPIClientImpl implements BroadcastAPI {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || BroadcastAPIServiceName;
    this.rpc = rpc;
    this.Ping = this.Ping.bind(this);
    this.BroadcastTx = this.BroadcastTx.bind(this);
  }
  Ping(request: RequestPing): Promise<ResponsePing> {
    const data = RequestPing.encode(request).finish();
    const promise = this.rpc.request(this.service, "Ping", data);
    return promise.then((data) => ResponsePing.decode(_m0.Reader.create(data)));
  }

  BroadcastTx(request: RequestBroadcastTx): Promise<ResponseBroadcastTx> {
    const data = RequestBroadcastTx.encode(request).finish();
    const promise = this.rpc.request(this.service, "BroadcastTx", data);
    return promise.then((data) => ResponseBroadcastTx.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
