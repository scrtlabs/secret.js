// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               v5.29.1
// source: tendermint/types/canonical.proto

/* eslint-disable */
import Long from "long";
import * as _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { SignedMsgType, signedMsgTypeFromJSON, signedMsgTypeToJSON } from "./types";

export const protobufPackage = "tendermint.types";

export interface CanonicalBlockID {
  hash: Uint8Array;
  part_set_header?: CanonicalPartSetHeader | undefined;
}

export interface CanonicalPartSetHeader {
  total: number;
  hash: Uint8Array;
}

export interface CanonicalProposal {
  /** type alias for byte */
  type: SignedMsgType;
  /** canonicalization requires fixed size encoding here */
  height: string;
  /** canonicalization requires fixed size encoding here */
  round: string;
  pol_round: string;
  block_id?: CanonicalBlockID | undefined;
  timestamp?: Timestamp | undefined;
  chain_id: string;
}

export interface CanonicalVote {
  /** type alias for byte */
  type: SignedMsgType;
  /** canonicalization requires fixed size encoding here */
  height: string;
  /** canonicalization requires fixed size encoding here */
  round: string;
  block_id?: CanonicalBlockID | undefined;
  timestamp?: Timestamp | undefined;
  chain_id: string;
}

/**
 * CanonicalVoteExtension provides us a way to serialize a vote extension from
 * a particular validator such that we can sign over those serialized bytes.
 */
export interface CanonicalVoteExtension {
  extension: Uint8Array;
  height: string;
  round: string;
  chain_id: string;
}

function createBaseCanonicalBlockID(): CanonicalBlockID {
  return { hash: new Uint8Array(0), part_set_header: undefined };
}

export const CanonicalBlockID = {
  encode(message: CanonicalBlockID, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    if (message.part_set_header !== undefined) {
      CanonicalPartSetHeader.encode(message.part_set_header, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CanonicalBlockID {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanonicalBlockID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.part_set_header = CanonicalPartSetHeader.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanonicalBlockID {
    return {
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
      part_set_header: isSet(object.part_set_header)
        ? CanonicalPartSetHeader.fromJSON(object.part_set_header)
        : undefined,
    };
  },

  toJSON(message: CanonicalBlockID): unknown {
    const obj: any = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.part_set_header !== undefined) {
      obj.part_set_header = CanonicalPartSetHeader.toJSON(message.part_set_header);
    }
    return obj;
  },

  create(base?: DeepPartial<CanonicalBlockID>): CanonicalBlockID {
    return CanonicalBlockID.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CanonicalBlockID>): CanonicalBlockID {
    const message = createBaseCanonicalBlockID();
    message.hash = object.hash ?? new Uint8Array(0);
    message.part_set_header = (object.part_set_header !== undefined && object.part_set_header !== null)
      ? CanonicalPartSetHeader.fromPartial(object.part_set_header)
      : undefined;
    return message;
  },
};

function createBaseCanonicalPartSetHeader(): CanonicalPartSetHeader {
  return { total: 0, hash: new Uint8Array(0) };
}

export const CanonicalPartSetHeader = {
  encode(message: CanonicalPartSetHeader, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.total !== 0) {
      writer.uint32(8).uint32(message.total);
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CanonicalPartSetHeader {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanonicalPartSetHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.total = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanonicalPartSetHeader {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      hash: isSet(object.hash) ? bytesFromBase64(object.hash) : new Uint8Array(0),
    };
  },

  toJSON(message: CanonicalPartSetHeader): unknown {
    const obj: any = {};
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    return obj;
  },

  create(base?: DeepPartial<CanonicalPartSetHeader>): CanonicalPartSetHeader {
    return CanonicalPartSetHeader.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CanonicalPartSetHeader>): CanonicalPartSetHeader {
    const message = createBaseCanonicalPartSetHeader();
    message.total = object.total ?? 0;
    message.hash = object.hash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseCanonicalProposal(): CanonicalProposal {
  return { type: 0, height: "0", round: "0", pol_round: "0", block_id: undefined, timestamp: undefined, chain_id: "" };
}

export const CanonicalProposal = {
  encode(message: CanonicalProposal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.height !== "0") {
      writer.uint32(17).sfixed64(message.height);
    }
    if (message.round !== "0") {
      writer.uint32(25).sfixed64(message.round);
    }
    if (message.pol_round !== "0") {
      writer.uint32(32).int64(message.pol_round);
    }
    if (message.block_id !== undefined) {
      CanonicalBlockID.encode(message.block_id, writer.uint32(42).fork()).ldelim();
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(message.timestamp, writer.uint32(50).fork()).ldelim();
    }
    if (message.chain_id !== "") {
      writer.uint32(58).string(message.chain_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CanonicalProposal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanonicalProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.height = longToString(reader.sfixed64() as Long);
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.round = longToString(reader.sfixed64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pol_round = longToString(reader.int64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.block_id = CanonicalBlockID.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.timestamp = Timestamp.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.chain_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanonicalProposal {
    return {
      type: isSet(object.type) ? signedMsgTypeFromJSON(object.type) : 0,
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      round: isSet(object.round) ? globalThis.String(object.round) : "0",
      pol_round: isSet(object.pol_round) ? globalThis.String(object.pol_round) : "0",
      block_id: isSet(object.block_id) ? CanonicalBlockID.fromJSON(object.block_id) : undefined,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      chain_id: isSet(object.chain_id) ? globalThis.String(object.chain_id) : "",
    };
  },

  toJSON(message: CanonicalProposal): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = signedMsgTypeToJSON(message.type);
    }
    if (message.height !== "0") {
      obj.height = message.height;
    }
    if (message.round !== "0") {
      obj.round = message.round;
    }
    if (message.pol_round !== "0") {
      obj.pol_round = message.pol_round;
    }
    if (message.block_id !== undefined) {
      obj.block_id = CanonicalBlockID.toJSON(message.block_id);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = fromTimestamp(message.timestamp).toISOString();
    }
    if (message.chain_id !== "") {
      obj.chain_id = message.chain_id;
    }
    return obj;
  },

  create(base?: DeepPartial<CanonicalProposal>): CanonicalProposal {
    return CanonicalProposal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CanonicalProposal>): CanonicalProposal {
    const message = createBaseCanonicalProposal();
    message.type = object.type ?? 0;
    message.height = object.height ?? "0";
    message.round = object.round ?? "0";
    message.pol_round = object.pol_round ?? "0";
    message.block_id = (object.block_id !== undefined && object.block_id !== null)
      ? CanonicalBlockID.fromPartial(object.block_id)
      : undefined;
    message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
      ? Timestamp.fromPartial(object.timestamp)
      : undefined;
    message.chain_id = object.chain_id ?? "";
    return message;
  },
};

function createBaseCanonicalVote(): CanonicalVote {
  return { type: 0, height: "0", round: "0", block_id: undefined, timestamp: undefined, chain_id: "" };
}

export const CanonicalVote = {
  encode(message: CanonicalVote, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.height !== "0") {
      writer.uint32(17).sfixed64(message.height);
    }
    if (message.round !== "0") {
      writer.uint32(25).sfixed64(message.round);
    }
    if (message.block_id !== undefined) {
      CanonicalBlockID.encode(message.block_id, writer.uint32(34).fork()).ldelim();
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(message.timestamp, writer.uint32(42).fork()).ldelim();
    }
    if (message.chain_id !== "") {
      writer.uint32(50).string(message.chain_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CanonicalVote {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanonicalVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.height = longToString(reader.sfixed64() as Long);
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.round = longToString(reader.sfixed64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.block_id = CanonicalBlockID.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timestamp = Timestamp.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.chain_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanonicalVote {
    return {
      type: isSet(object.type) ? signedMsgTypeFromJSON(object.type) : 0,
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      round: isSet(object.round) ? globalThis.String(object.round) : "0",
      block_id: isSet(object.block_id) ? CanonicalBlockID.fromJSON(object.block_id) : undefined,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      chain_id: isSet(object.chain_id) ? globalThis.String(object.chain_id) : "",
    };
  },

  toJSON(message: CanonicalVote): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = signedMsgTypeToJSON(message.type);
    }
    if (message.height !== "0") {
      obj.height = message.height;
    }
    if (message.round !== "0") {
      obj.round = message.round;
    }
    if (message.block_id !== undefined) {
      obj.block_id = CanonicalBlockID.toJSON(message.block_id);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = fromTimestamp(message.timestamp).toISOString();
    }
    if (message.chain_id !== "") {
      obj.chain_id = message.chain_id;
    }
    return obj;
  },

  create(base?: DeepPartial<CanonicalVote>): CanonicalVote {
    return CanonicalVote.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CanonicalVote>): CanonicalVote {
    const message = createBaseCanonicalVote();
    message.type = object.type ?? 0;
    message.height = object.height ?? "0";
    message.round = object.round ?? "0";
    message.block_id = (object.block_id !== undefined && object.block_id !== null)
      ? CanonicalBlockID.fromPartial(object.block_id)
      : undefined;
    message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
      ? Timestamp.fromPartial(object.timestamp)
      : undefined;
    message.chain_id = object.chain_id ?? "";
    return message;
  },
};

function createBaseCanonicalVoteExtension(): CanonicalVoteExtension {
  return { extension: new Uint8Array(0), height: "0", round: "0", chain_id: "" };
}

export const CanonicalVoteExtension = {
  encode(message: CanonicalVoteExtension, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.extension.length !== 0) {
      writer.uint32(10).bytes(message.extension);
    }
    if (message.height !== "0") {
      writer.uint32(17).sfixed64(message.height);
    }
    if (message.round !== "0") {
      writer.uint32(25).sfixed64(message.round);
    }
    if (message.chain_id !== "") {
      writer.uint32(34).string(message.chain_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CanonicalVoteExtension {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanonicalVoteExtension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.extension = reader.bytes();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.height = longToString(reader.sfixed64() as Long);
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.round = longToString(reader.sfixed64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.chain_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanonicalVoteExtension {
    return {
      extension: isSet(object.extension) ? bytesFromBase64(object.extension) : new Uint8Array(0),
      height: isSet(object.height) ? globalThis.String(object.height) : "0",
      round: isSet(object.round) ? globalThis.String(object.round) : "0",
      chain_id: isSet(object.chain_id) ? globalThis.String(object.chain_id) : "",
    };
  },

  toJSON(message: CanonicalVoteExtension): unknown {
    const obj: any = {};
    if (message.extension.length !== 0) {
      obj.extension = base64FromBytes(message.extension);
    }
    if (message.height !== "0") {
      obj.height = message.height;
    }
    if (message.round !== "0") {
      obj.round = message.round;
    }
    if (message.chain_id !== "") {
      obj.chain_id = message.chain_id;
    }
    return obj;
  },

  create(base?: DeepPartial<CanonicalVoteExtension>): CanonicalVoteExtension {
    return CanonicalVoteExtension.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CanonicalVoteExtension>): CanonicalVoteExtension {
    const message = createBaseCanonicalVoteExtension();
    message.extension = object.extension ?? new Uint8Array(0);
    message.height = object.height ?? "0";
    message.round = object.round ?? "0";
    message.chain_id = object.chain_id ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Timestamp {
  if (o instanceof globalThis.Date) {
    return toTimestamp(o);
  } else if (typeof o === "string") {
    return toTimestamp(new globalThis.Date(o));
  } else {
    return Timestamp.fromJSON(o);
  }
}

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
